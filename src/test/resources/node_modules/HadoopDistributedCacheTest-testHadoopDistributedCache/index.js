'use strict';

var assert = require('assert');
var Configuration = require('hadoop-configuration').Configuration;
var DistributedCache = require('hadoop-distributed-cache').DistributedCache;

function isArray(arg) {
  return Object.prototype.toString.call(arg) === '[object Array]';
}

function testAddArchiveToClassPath () {
  var conf = new Configuration();
  var path = '/file/classpath/archive';

  // Test with the wrong number of arguments
  try {
    DistributedCache.addArchiveToClassPath();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.addArchiveToClassPath(null, conf);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.addArchiveToClassPath(path, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.addArchiveToClassPath(path, '/not/a/configuration');
  } catch (err) {
    assert.equal('Second argument must be a Configuration object', err.message);
  }

  var origPaths = DistributedCache.getArchiveClassPaths(conf);

  assert.equal(-1, origPaths.indexOf(path));

  DistributedCache.addArchiveToClassPath(path, conf);

  var newPaths = DistributedCache.getArchiveClassPaths(conf);

  assert.ok(newPaths.indexOf(path) > -1);
}

function testAddCacheArchive () {
  var conf = new Configuration();
  var uri = 'file:///some/cache/archive';

  // Test with the wrong number of arguments
  try {
    DistributedCache.addCacheArchive();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.addCacheArchive(null, conf);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.addCacheArchive(uri, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.addCacheArchive(uri, '/not/a/configuration');
  } catch (err) {
    assert.equal('Second argument must be a Configuration object', err.message);
  }

  var origPaths = DistributedCache.getCacheArchives(conf);

  assert.equal(-1, origPaths.indexOf(uri));

  DistributedCache.addCacheArchive(uri, conf);

  var newPaths = DistributedCache.getCacheArchives(conf);

  assert.ok(newPaths.indexOf(uri) > -1);
}

function testAddCacheFile () {
  var conf = new Configuration();
  var uri = 'file:///some/cache/file';

  // Test with the wrong number of arguments
  try {
    DistributedCache.addCacheFile();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.addCacheFile(null, conf);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.addCacheFile(uri, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.addCacheFile(uri, '/not/a/configuration');
  } catch (err) {
    assert.equal('Second argument must be a Configuration object', err.message);
  }

  var origPaths = DistributedCache.getCacheFiles(conf);

  assert.equal(-1, origPaths.indexOf(uri));

  DistributedCache.addCacheFile(uri, conf);

  var newPaths = DistributedCache.getCacheFiles(conf);

  assert.ok(newPaths.indexOf(uri) > -1);
}

function testAddFileToClassPath () {
  var conf = new Configuration();
  var path = '/some/classpath/file';

  // Test with the wrong number of arguments
  try {
    DistributedCache.addFileToClassPath();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.addFileToClassPath(null, conf);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.addFileToClassPath(path, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.addFileToClassPath(path, '/not/a/configuration');
  } catch (err) {
    assert.equal('Second argument must be a Configuration object', err.message);
  }

  var origPaths = DistributedCache.getFileClassPaths(conf);

  assert.equal(-1, origPaths.indexOf(path));

  DistributedCache.addFileToClassPath(path, conf);

  var newPaths = DistributedCache.getFileClassPaths(conf);

  assert.ok(newPaths.indexOf(path) > -1);
}

function testAddLocalArchives () {
  var conf = new Configuration();
  var archives = '/some/local/archive0,/some/local/archive1';

  // Test with the wrong number of arguments
  try {
    DistributedCache.addLocalArchives();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.addLocalArchives(null, archives);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.addLocalArchives(conf, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.addLocalArchives('/not/a/configuration', archives);
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.deepEqual([], DistributedCache.getLocalCacheArchives(conf));

  DistributedCache.addLocalArchives(conf, archives);

  assert.deepEqual([
    '/some/local/archive0',
    '/some/local/archive1'
  ], DistributedCache.getLocalCacheArchives(conf));
}

function testAddLocalFiles () {
  var conf = new Configuration();
  var files = '/some/local/file0,/some/local/file1';

  // Test with the wrong number of arguments
  try {
    DistributedCache.addLocalFiles();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.addLocalFiles(null, files);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.addLocalFiles(conf, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.addLocalFiles('/not/a/configuration', files);
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.deepEqual([], DistributedCache.getLocalCacheFiles(conf));

  DistributedCache.addLocalFiles(conf, files);

  assert.deepEqual([
    '/some/local/file0',
    '/some/local/file1'
  ], DistributedCache.getLocalCacheFiles(conf));
}

function testCheckURIs () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.checkURIs();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.checkURIs(null, []);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.checkURIs([], null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.checkURIs('/not/an/array', []);
  } catch (err) {
    assert.equal('First argument must be an array', err.message);
  }

  try {
    DistributedCache.checkURIs([], '/not/an/array');
  } catch (err) {
    assert.equal('Second argument must be an array', err.message);
  }

  // We shouldn't concern ourselves with testing the DistributedCache logic
  assert.equal('boolean', typeof DistributedCache.checkURIs([], []));
}

function testCreateAllSymlink () {
  var conf = new Configuration();
  var jobCacheDir = '/tmp/some/job/cache/dir';
  var workDir = '/tmp/some/work/dir';

  // Test with the wrong number of arguments
  try {
    DistributedCache.createAllSymlink();
  } catch (err) {
    assert.equal('Three arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.createAllSymlink(null, jobCacheDir, workDir);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.createAllSymlink(conf, null, workDir);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.createAllSymlink(conf, jobCacheDir, null);
  } catch (err) {
    assert.equal('Third argument is not optional', err.message);
  }

  try {
    DistributedCache.createAllSymlink('/not/a/configuration', jobCacheDir, workDir);
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  // We shouldn't concern ourselves with testing the DistributedCache logic
  DistributedCache.createAllSymlink(conf, jobCacheDir, workDir);
}

function testCreateSymlink () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.createSymlink();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.createSymlink('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  // We shouldn't concern ourselves with testing the DistributedCache logic
  DistributedCache.createSymlink(conf);

}

function testGetArchiveClassPaths () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.getArchiveClassPaths();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.getArchiveClassPaths('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.ok(isArray(DistributedCache.getArchiveClassPaths(conf)));
}

function testGetArchiveTimestamps () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.getArchiveTimestamps();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.getArchiveTimestamps('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  // We can't test this without a real job being submitted
  assert.ok(DistributedCache.getArchiveTimestamps(conf) === null);
}

function testGetCacheArchives () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.getCacheArchives();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.getCacheArchives('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.ok(isArray(DistributedCache.getCacheArchives(conf)));
}

function testGetCacheFiles () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.getCacheFiles();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.getCacheFiles('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.ok(isArray(DistributedCache.getCacheFiles(conf)));
}

function testGetFileClassPaths () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.getFileClassPaths();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.getFileClassPaths('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.ok(isArray(DistributedCache.getFileClassPaths(conf)));
}

function testGetFileStatus () {
  var conf = new Configuration();
  var uri = 'file://' + require('path').resolve('.');

  // Test with the wrong number of arguments
  try {
    DistributedCache.getFileStatus();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    DistributedCache.getFileStatus(null, uri);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.getFileStatus(conf, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.getFileClassPaths('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  var status = DistributedCache.getFileStatus(conf, uri);

  assert.ok('accessTime' in status);
  assert.ok('blockSize' in status);
  assert.ok('group' in status);
  assert.ok('len' in status);
  assert.ok('modificationTime' in status);
  assert.ok('owner' in status);
  assert.ok('path' in status);
  assert.ok('permission' in status);
  assert.ok('replication' in status);

}

function testGetFileTimestamps () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.getFileTimestamps();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.getFileTimestamps('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  // We can't test this without a real job being submitted
  assert.ok(DistributedCache.getFileTimestamps(conf) === null);
}

function testGetLocalArchives () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.getLocalCacheArchives();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.getLocalCacheArchives('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.ok(isArray(DistributedCache.getLocalCacheArchives(conf)));
}

function testGetLocalFiles () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.getLocalCacheFiles();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.getLocalCacheFiles('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.ok(isArray(DistributedCache.getLocalCacheFiles(conf)));
}

function testGetSymlink () {
  var conf = new Configuration();

  // Test with the wrong number of arguments
  try {
    DistributedCache.getSymlink();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  try {
    DistributedCache.getSymlink('/not/a/configuration');
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.equal('boolean', typeof DistributedCache.getSymlink(conf));
}

function testGetTimestamp () {
  var conf = new Configuration();
  var uri = 'file://' + require('path').resolve('.');

  // Test with the wrong number of arguments
  try {
    DistributedCache.getTimestamp();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    DistributedCache.getTimestamp(null, uri);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.getTimestamp(conf, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.getTimestamp('/not/a/configuration', uri);
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  assert.equal('number', typeof DistributedCache.getTimestamp(conf, uri));
}

function testSetArchiveTimestamps () {
  var conf = new Configuration();
  var timestamps = '12345';

  // Test with the wrong number of arguments
  try {
    DistributedCache.setArchiveTimestamps();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    DistributedCache.setArchiveTimestamps(null, timestamps);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.setArchiveTimestamps(conf, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.setArchiveTimestamps('/not/a/configuration', timestamps);
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  // We shouldn't concern ourselves with testing the DistributedCache logic
  DistributedCache.setArchiveTimestamps(conf, timestamps);
}

function testSetCacheArchives () {
  var conf = new Configuration();
  var archives = [
    'file:///some/cache/archive0',
    'file:///some/cache/archive1'
  ];

  // Test with the wrong number of arguments
  try {
    DistributedCache.setCacheArchives();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    DistributedCache.setCacheArchives(null, conf);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.setCacheArchives(archives, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.setCacheArchives('/not/an/array', conf);
  } catch (err) {
    assert.equal('First argument must be an array', err.message);
  }

  try {
    DistributedCache.setCacheArchives(archives, '/not/a/configuration');
  } catch (err) {
    assert.equal('Second argument must be a Configuration object', err.message);
  }

  DistributedCache.setCacheArchives(archives, conf);

  assert.deepEqual(archives, DistributedCache.getCacheArchives(conf));
}

function testSetCacheFiles () {
  var conf = new Configuration();
  var files = [
    'file:///some/cache/file0',
    'file:///some/cache/file1'
  ];

  // Test with the wrong number of arguments
  try {
    DistributedCache.setCacheFiles();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    DistributedCache.setCacheFiles(null, conf);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.setCacheFiles(files, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.setCacheFiles('/not/an/array', conf);
  } catch (err) {
    assert.equal('First argument must be an array', err.message);
  }

  try {
    DistributedCache.setCacheFiles(files, '/not/a/configuration');
  } catch (err) {
    assert.equal('Second argument must be a Configuration object', err.message);
  }

  DistributedCache.setCacheFiles(files, conf);

  assert.deepEqual(files, DistributedCache.getCacheFiles(conf));
}

function testSetFileTimestamps () {
  var conf = new Configuration();
  var timestamps = '12345';

  // Test with the wrong number of arguments
  try {
    DistributedCache.setFileTimestamps();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    DistributedCache.setFileTimestamps(null, timestamps);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.setFileTimestamps(conf, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.setFileTimestamps('/not/a/configuration', timestamps);
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  // We shouldn't concern ourselves with testing the DistributedCache logic
  DistributedCache.setFileTimestamps(conf, timestamps);
}

function testSetLocalArchives () {
  var conf = new Configuration();
  var archives = '/some/local/archive0,/some/local/archive1';

  // Test with the wrong number of arguments
  try {
    DistributedCache.setLocalArchives();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.setLocalArchives(null, archives);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.setLocalArchives(conf, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.setLocalArchives('/not/a/configuration', archives);
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  DistributedCache.setLocalArchives(conf, '');

  assert.deepEqual([], DistributedCache.getLocalCacheArchives(conf));

  DistributedCache.setLocalArchives(conf, archives);

  assert.deepEqual([
    '/some/local/archive0',
    '/some/local/archive1'
  ], DistributedCache.getLocalCacheArchives(conf));
}

function testSetLocalFiles () {
  var conf = new Configuration();
  var files = '/some/local/file0,/some/local/file1';

  // Test with the wrong number of arguments
  try {
    DistributedCache.setLocalFiles();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  // Test with wrong argument types
  try {
    DistributedCache.setLocalFiles(null, files);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    DistributedCache.setLocalFiles(conf, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    DistributedCache.setLocalFiles('/not/a/configuration', files);
  } catch (err) {
    assert.equal('First argument must be a Configuration object', err.message);
  }

  DistributedCache.setLocalFiles(conf, '');

  assert.deepEqual([], DistributedCache.getLocalCacheFiles(conf));

  DistributedCache.setLocalFiles(conf, files);

  assert.deepEqual([
    '/some/local/file0',
    '/some/local/file1'
  ], DistributedCache.getLocalCacheFiles(conf));
}

module.exports.testHadoopDistributedCache = function (cb) {

  try {
    testAddArchiveToClassPath();
    testAddCacheArchive();
    testAddCacheFile();
    testAddFileToClassPath();
    testAddLocalArchives();
    testAddLocalFiles();
    testCheckURIs();
    testCreateAllSymlink();
    testCreateSymlink();
    testGetArchiveClassPaths();
    testGetArchiveTimestamps();
    testGetCacheArchives();
    testGetCacheFiles();
    testGetFileClassPaths();
    testGetFileStatus();
    testGetFileTimestamps();
    testGetLocalArchives();
    testGetLocalFiles();
    testGetSymlink();
    testGetTimestamp();
    testSetArchiveTimestamps();
    testSetCacheArchives();
    testSetCacheFiles();
    testSetFileTimestamps();
    testSetLocalArchives();
    testSetLocalFiles();
  } catch (err) {
    if (err.stack) {
      console.error(err.stack);
    }
    throw new Error(err.message);
  }

  cb();

};