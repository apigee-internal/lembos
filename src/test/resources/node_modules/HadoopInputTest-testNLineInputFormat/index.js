'use strict';

var assert = require('assert');
var Job = require('hadoop-job').Job;
var NLineInputFormat = require('hadoop-input').NLineInputFormat;

function testGetNumLinesPerSplit () {
  var job = new Job();

  // Test wrong arguments
  try {
    NLineInputFormat.getNumLinesPerSplit();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  try {
    NLineInputFormat.getNumLinesPerSplit(null);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    NLineInputFormat.getNumLinesPerSplit('job');
  } catch (err) {
    assert.equal('First argument must be a Job object', err.message);
  }

  // Test

  assert.ok(NLineInputFormat.getNumLinesPerSplit(job) > 0);
}

function testSetNumLinesPerSplit () {
  var job = new Job();

  // Test wrong arguments
  try {
    NLineInputFormat.setNumLinesPerSplit();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    NLineInputFormat.setNumLinesPerSplit(null, 2);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    NLineInputFormat.setNumLinesPerSplit(job, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    NLineInputFormat.setNumLinesPerSplit('job', 2);
  } catch (err) {
    assert.equal('First argument must be a Job object', err.message);
  }

  try {
    NLineInputFormat.setNumLinesPerSplit(job, '1');
  } catch (err) {
    assert.equal('Second argument must be a number', err.message);
  }

  // Test

  var numLinesPerSplit = NLineInputFormat.getNumLinesPerSplit(job);

  NLineInputFormat.setNumLinesPerSplit(job, numLinesPerSplit + 1);

  assert.equal(numLinesPerSplit + 1, NLineInputFormat.getNumLinesPerSplit(job));
}

module.exports.testNLineInputFormat = function (cb) {

  try {
    require('../FileInputFormatTests').testFileInputFormat(NLineInputFormat, cb);

    testGetNumLinesPerSplit();
    testSetNumLinesPerSplit();
  } catch (err) {
    if (err.stack) {
      console.error(err.stack);
    }
    throw new Error(err.message);
  }

  cb();

};