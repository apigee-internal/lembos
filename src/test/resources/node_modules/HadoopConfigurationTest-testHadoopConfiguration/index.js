'use strict';

var assert = require('assert');
var Configuration = require('hadoop-configuration').Configuration;
var path = require('path');

function testNewConfiguration() {
  // Test with wrong arguments
  try {
    new Configuration(12345);
  } catch (err) {
    assert.equal('First argument must be a boolean or a Configuration object', err.message);
  }

  // Test different constructor options
  assert.ok(new Configuration() instanceof Configuration);
  assert.ok(new Configuration(false) instanceof Configuration);
  assert.ok(new Configuration(new Configuration()) instanceof Configuration);
}

function testAddDefaultResource() {
  // Test with wrong arguments
  try {
    Configuration.addDefaultResource();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // We shouldn't concern ourselves with testing the DistributedCache logic
  Configuration.addDefaultResource('target/test-classes/META-INF/servies/io.apigee.trireme.core.NodeModule');
}

function testAddResource() {
  var conf = new Configuration();

  // Test with wrong arguments
  try {
    conf.addResource();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  // We shouldn't concern ourselves with testing the DistributedCache logic
  conf.addResource('target/test-classes/META-INF/servies/io.apigee.trireme.core.NodeModule');
  conf.addResource('file://' + path.resolve('.'));
}

function testClear() {
  // We shouldn't concern ourselves with testing the DistributedCache logic
  new Configuration().clear();
}

function testGet() {
  var conf = new Configuration();
  var prop = 'testGet.property';
  var defaulVal = 'default';

  // Test with wrong arguments
  try {
    conf.get();
  } catch (err) {
    assert.equal('One or two arguments expected', err.message);
  }

  try {
    conf.get(null, defaulVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  // Test missing property without a default
  assert.equal(null, conf.get(prop));

  // Test missing property with a default
  assert.equal(defaulVal, conf.get(prop, defaulVal));
}

function testGetBoolean() {
  var conf = new Configuration();
  var prop = 'testGetBoolean.property';
  var defaultVal = false;

  // Test with wrong arguments
  try {
    conf.getBoolean();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.getBoolean(null, defaultVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.getBoolean(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.getBoolean(prop, '');
  } catch (err) {
    assert.equal('Second argument must be a boolean', err.message);
  }

  // Test missing property with a default
  assert.ok(!conf.getBoolean(prop, defaultVal));
}

function testGetFloat() {
  var conf = new Configuration();
  var prop = 'testGetFloat.property';
  var defaultVal = 1.1;

  // Test with wrong arguments
  try {
    conf.getFloat();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.getFloat(null, defaultVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.getFloat(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.getFloat(prop, '');
  } catch (err) {
    assert.equal('Second argument must be a number', err.message);
  }

  // Test missing property with a default
  assert.equal(defaultVal, conf.getFloat(prop, defaultVal));
}

function testGetInt() {
  var conf = new Configuration();
  var prop = 'testGetInt.property';
  var defaultVal = 1;

  // Test with wrong arguments
  try {
    conf.getInt();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.getInt(null, defaultVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.getInt(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.getInt(prop, '');
  } catch (err) {
    assert.equal('Second argument must be a number', err.message);
  }

  // Test missing property with a default
  assert.equal(defaultVal, conf.getInt(prop, defaultVal));
}

function testGetLong() {
  var conf = new Configuration();
  var prop = 'testGetLong.property';
  var defaultVal = 1;

  // Test with wrong arguments
  try {
    conf.getLong();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.getLong(null, defaultVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.getLong(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.getLong(prop, '');
  } catch (err) {
    assert.equal('Second argument must be a number', err.message);
  }

  // Test missing property with a default
  assert.equal(defaultVal, conf.getLong(prop, defaultVal));
}

function testGetRaw() {
  var conf = new Configuration();

  // Test with wrong arguments
  try {
    conf.getRaw();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  assert.equal(null, conf.getRaw('testGetRaw.property'));

  conf.set('testGetRaw.property', '${user.name}');

  assert.notEqual('${user.name}', conf.get('testGetRaw.property'));

  assert.equal('${user.name}', conf.getRaw('testGetRaw.property'));
}

function testGetResource() {
  var conf = new Configuration();

  // Test with wrong arguments
  try {
    conf.getResource();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }


  assert.ok(conf.getResource('.').indexOf('/target/test-classes') > -1);
}

function testGetStringCollection() {
  var conf = new Configuration();

  // Test with wrong arguments
  try {
    conf.getStringCollection();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  assert.deepEqual([], conf.getStringCollection('testGetStringCollection.property'));
}

function testGetStrings() {
  var conf = new Configuration();
  var prop = 'testGetStrings.property';
  var defaultValue = ['one', 'two', 'three'];

  // Test with wrong arguments
  try {
    conf.getStrings();
  } catch (err) {
    assert.equal('One or two arguments expected', err.message);
  }

  try {
    conf.getStrings(null, defaultValue);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.getStrings(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.getStrings(prop, '');
  } catch (err) {
    assert.equal('Second argument must be an array', err.message);
  }

  // Test missing property without a default
  assert.equal(null, conf.getStrings(prop));

  // Test missing property with a default
  assert.deepEqual(defaultValue, conf.getStrings(prop, defaultValue));
}

function testGetValByRegex() {
  var conf = new Configuration();

  // Test with wrong arguments
  try {
    conf.getValByRegex();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  var matches = conf.getValByRegex(/(float|int|long)\.value/);

  assert.equal(0, Object.keys(matches).length);

  conf.set('float.value', 1.1);
  conf.set('int.value', 1);
  conf.set('long.value', 1);

  matches = conf.getValByRegex(/(float|int|long)\.value/);

  assert.ok('float.value' in matches);
  assert.ok('int.value' in matches);
  assert.ok('long.value' in matches);
  assert.equal(3, Object.keys(matches).length);
}

function testReloadConfiguration() {
  // We shouldn't concern ourselves with testing the DistributedCache logic
  new Configuration().reloadConfiguration();
}

function testSet() {
  var conf = new Configuration();
  var prop = 'testSet.property';
  var propVal = 'testSet';

  // Test with wrong arguments
  try {
    conf.set();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.set(null, propVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.set(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  assert.ok(conf.set(prop, propVal) instanceof Configuration);

  assert.equal(propVal, conf.get(prop));
}

function testSetBoolean() {
  var conf = new Configuration();
  var prop = 'testSetBoolean.property';
  var propVal = false;

  // Test with wrong arguments
  try {
    conf.setBoolean();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.setBoolean(null, propVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.setBoolean(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.setBoolean(prop, '');
  } catch (err) {
    assert.equal('Second argument must be a boolean', err.message);
  }

  assert.ok(conf.setBoolean(prop, propVal) instanceof Configuration);

  assert.ok(!conf.getBoolean(prop, true));
}

function testSetBooleanIfUnset() {
  var conf = new Configuration();
  var prop = 'testSetBooleanIfUnset.property';
  var propVal = false;

  // Test with wrong arguments
  try {
    conf.setBooleanIfUnset();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.setBooleanIfUnset(null, propVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.setBooleanIfUnset(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.setBooleanIfUnset(prop, '');
  } catch (err) {
    assert.equal('Second argument must be a boolean', err.message);
  }

  assert.ok(conf.setBooleanIfUnset(prop, propVal) instanceof Configuration);

  assert.ok(!conf.getBoolean(prop, true));

  conf.setBooleanIfUnset(prop, true);

  assert.ok(!conf.getBoolean(prop, true));
}

function testSetClass() {
  var conf = new Configuration();
  var prop = 'mapred.map.output.compression.codec';
  var clazz = 'org.apache.hadoop.io.compress.GzipCodec';
  var iface = 'org.apache.hadoop.io.compress.CompressionCodec';

  // Test with wrong arguments
  try {
    conf.setClass();
  } catch (err) {
    assert.equal('Three arguments expected', err.message);
  }

  try {
    conf.setClass(prop);
  } catch (err) {
    assert.equal('Three arguments expected', err.message);
  }

  try {
    conf.setClass(prop, clazz);
  } catch (err) {
    assert.equal('Three arguments expected', err.message);
  }

  try {
    conf.setClass(null, clazz, iface);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.setClass(prop, null, iface);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.setClass(prop, clazz, null);
  } catch (err) {
    assert.equal('Third argument is not optional', err.message);
  }

  // We shouldn't concern ourselves with testing the DistributedCache logic
  assert.ok(conf.setClass(prop, clazz, iface) instanceof Configuration);
}

function testSetFloat() {
  var conf = new Configuration();
  var prop = 'testSetFloat.property';
  var propVal = 1.1;

  // Test with wrong arguments
  try {
    conf.setFloat();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.setFloat(null, propVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.setFloat(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.setFloat(prop, '');
  } catch (err) {
    assert.equal('Second argument must be a number', err.message);
  }

  assert.ok(conf.setFloat(prop, propVal) instanceof Configuration);

  assert.equal(propVal, conf.getFloat(prop, 0.0));
}

function testSetIfUnset() {
  var conf = new Configuration();
  var prop = 'testSetIfUnset.property';
  var propVal = 'testSet';

  // Test with wrong arguments
  try {
    conf.setIfUnset();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.setIfUnset(null, propVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.setIfUnset(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  assert.ok(conf.setIfUnset(prop, propVal) instanceof Configuration);

  assert.equal(propVal, conf.get(prop));

  conf.setIfUnset(prop, 'newTestSet');

  assert.equal(propVal, conf.get(prop));
}

function testSetInt() {
  var conf = new Configuration();
  var prop = 'testSetInt.property';
  var propVal = 1;

  // Test with wrong arguments
  try {
    conf.setInt();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.setInt(null, propVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.setInt(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.setInt(prop, '');
  } catch (err) {
    assert.equal('Second argument must be a number', err.message);
  }

  assert.ok(conf.setInt(prop, propVal) instanceof Configuration);

  assert.equal(propVal, conf.getInt(prop, 0));
}

function testSetLong() {
  var conf = new Configuration();
  var prop = 'testSetLong.property';
  var propVal = 1;

  // Test with wrong arguments
  try {
    conf.setLong();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.setLong(null, propVal);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.setLong(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.setLong(prop, '');
  } catch (err) {
    assert.equal('Second argument must be a number', err.message);
  }

  assert.ok(conf.setLong(prop, propVal) instanceof Configuration);

  assert.equal(propVal, conf.getLong(prop, 0));
}

function testSetQuietMode() {
  var conf = new Configuration();

  // Test with wrong arguments
  try {
    conf.setQuietMode();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  try {
    conf.setQuietMode('');
  } catch (err) {
    assert.equal('First argument must be a boolean', err.message);
  }

  // We shouldn't concern ourselves with testing the DistributedCache logic
  assert.ok(new Configuration().setQuietMode(true) instanceof Configuration);
}

function testSetStrings() {
  var conf = new Configuration();
  var prop = 'testSetStrings.property';
  var values = ['one', 'two', 'three'];

  // Test with wrong arguments
  try {
    conf.setStrings();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    conf.setStrings(null, values);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    conf.setStrings(prop, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    conf.setStrings(prop, '');
  } catch (err) {
    assert.equal('Second argument must be an array', err.message);
  }

  assert.ok(conf.setStrings(prop, values) instanceof Configuration);

  assert.deepEqual(values, conf.getStrings(prop));
}

function testSize() {
  var conf = new Configuration();
  var orig = conf.size();

  conf.set('testSize.property', 'testSize');

  assert.equal(orig + 1, conf.size());
}

function testToString() {
  assert.equal(0, new Configuration().toString().indexOf('Configuration:'))
}

module.exports.testHadoopConfiguration = function (conf, cb) {

  assert.ok(conf instanceof Configuration);

  try {
    testNewConfiguration();
    testAddDefaultResource();
    testAddResource();
    testClear();
    testGet();
    testGetBoolean();
    testGetFloat();
    testGetInt();
    testGetLong();
    testGetRaw();
    testGetResource();
    testGetStringCollection();
    testGetStrings();
    testGetValByRegex();
    testReloadConfiguration();
    testSet();
    testSetBoolean();
    testSetBooleanIfUnset();
    testSetClass();
    testSetFloat();
    testSetIfUnset();
    testSetInt();
    testSetLong();
    testSetQuietMode()
    testSetStrings();
    testSize();
    testToString();
  } catch (err) {
    if (err.stack) {
      console.error(err.stack);
    }
    throw new Error(err.message);
  }

  cb();

};