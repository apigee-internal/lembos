'use strict';

var assert = require('assert');
var counterGroupName = 'Test Counters';
var counterName = 'Test Counter';

module.exports = {
  jobSetup: function (job, cb) {
    job.setInputFormatClass('io.apigee.lembos.mapreduce.RunOnceInputFormat')
       .setOutputFormatClass('org.apache.hadoop.mapreduce.lib.output.NullOutputFormat')
       .setMapSpeculativeExecution(false)
       .setSpeculativeExecution(false);

    cb();
  },

  map: function (key, value, context, cb) {
    context.getCounter(counterGroupName, counterName).increment(1);

    cb();
  },

  jobCleanup: function (job, cb) {
    // Test JobWrap.getCounters()
    var counters = job.getCounters();

    assert.equal('[object Counters]', counters.toString());

    // Test CountersWrap.countCounters()
    assert.ok(counters.countCounters() > 0);

    // Test CountersWrap.findCounter(String, String)

    try {
      counters.findCounter();
    } catch (err) {
      assert.equal('Two arguments expected', err.message);
    }

    try {
      counters.findCounter(null, '');
    } catch (err) {
      assert.equal('First argument is not optional', err.message);
    }

    try {
      counters.findCounter('', null);
    } catch (err) {
      assert.equal('Second argument is not optional', err.message);
    }

    assert.equal('[object Counter]', counters.findCounter(counterGroupName, counterName).toString());

    // Test CountersWrap.getGroup(String)

    try {
      counters.getGroup();
    } catch (err) {
      assert.equal('One argument expected', err.message);
    }

    assert.ok(counters.getGroup('Fake'));

    var counterGroup = counters.getGroup(counterGroupName);

    assert.equal('[object CounterGroup]', counterGroup.toString());

    // Test CountersWrap.getGroupNames();

    var groupNames = counters.getGroupNames();

    assert.equal('[object Array]', Object.prototype.toString.call(groupNames));

    var found = false;

    groupNames.forEach(function (groupName) {
      if (!found && groupName === counterGroupName) {
        found = true;
      }
    });

    assert.ok(found);

    // Test CountersWrap.incrAllCounters(Number)

    try {
      counters.incrAllCounters();
    } catch (err) {
      assert.equal('One argument expected', err.message);
    }

    try {
      counters.incrAllCounters('1');
    } catch (err) {
      assert.equal('First argument must be a Counters object', err.message);
    }

    var oldVal = counters.findCounter(counterGroupName, counterName).getValue();

    // This API takes the values in two counters and adds.  Since I'm adding a group to itself, check the value is twice
    // as much.
    counters.incrAllCounters(counters);

    assert.equal(oldVal * 2, counters.findCounter(counterGroupName, counterName).getValue());

    // Test CounterGroupWrap.findCounter(String)

    try {
      counterGroup.findCounter();
    } catch (err) {
      assert.equal('One argument expected', err.message);
    }

    try {
      counterGroup.findCounter(null);
    } catch (err) {
      assert.equal('First argument is not optional', err.message);
    }

    assert.ok(counterGroup.findCounter('Fake'));
    assert.ok(counterGroup.findCounter(counterName));

    // Test CounterGroupWrap.getDisplayName()
    assert.equal(counterGroupName, counterGroup.getDisplayName());

    // Test CounterGroupWrap.getName()
    assert.equal(counterGroupName, counterGroup.getName());

    // Test CounterGroupWrap.incrAllCounters(Number)

    try {
      counterGroup.incrAllCounters();
    } catch (err) {
      assert.equal('One argument expected', err.message);
    }

    try {
      counterGroup.incrAllCounters('1');
    } catch (err) {
      assert.equal('First argument must be a CounterGroup object', err.message);
    }

    oldVal = counters.findCounter(counterGroupName, counterName).getValue();

    // This API takes the values in two groups and adds.  Since I'm adding a group to itself, check the value is twice
    // as much.
    counterGroup.incrAllCounters(counterGroup);

    assert.equal(oldVal * 2, counters.findCounter(counterGroupName, counterName).getValue());

    // Test CounterGroupWrap.size()

    assert.equal(2, counterGroup.size());

    cb();
  }
};
