'use strict';

var assert = require('assert');
var Job = require('hadoop-job').Job;

function testSetInputPath (format) {
  var job = new Job();
  var dbWritableClass = 'org.apache.hadoop.mapreduce.lib.db.DBInputFormat$NullDBWritable';

  // Test wrong arguments
  try {
    format.setInput();
  } catch (err) {
    assert.equal('Four or six arguments expected', err.message);
  }

  try {
    format.setInput(job);
  } catch (err) {
    assert.equal('Four or six arguments expected', err.message);
  }

  try {
    format.setInput(job, dbWritableClass);
  } catch (err) {
    assert.equal('Four or six arguments expected', err.message);
  }

  try {
    format.setInput(job, dbWritableClass, 'queryOrTableName');
  } catch (err) {
    assert.equal('Four or six arguments expected', err.message);
  }

  try {
    format.setInput(job, dbWritableClass, 'tableName', 'conditions', 'orderBy');
  } catch (err) {
    assert.equal('Four or six arguments expected', err.message);
  }

  try {
    format.setInput(job, 'org.apache.hadoop.io.Text', 'queryOrTableName', 'queryOrTableName');
  } catch (err) {
    assert.equal('org.apache.hadoop.io.Text is not a valid org.apache.hadoop.mapreduce.lib.db.DBWritable', err.message);
  }

  try {
    format.setInput(job, 'org.apache.hadoop.io.Text', 'queryOrTableName', 'conditions', 'orderBy', []);
  } catch (err) {
    assert.equal('org.apache.hadoop.io.Text is not a valid org.apache.hadoop.mapreduce.lib.db.DBWritable', err.message);
  }

  try {
    format.setInput(job, dbWritableClass, 'queryOrTableName', 'conditions', 'orderBy', 'array');
  } catch (err) {
    assert.equal('Sixth argument must be an array', err.message);
  }

  // Test four argument version
  format.setInput(job, dbWritableClass, 'SELECT * FROM USERS', 'SELECT COUNT(*) FROM USERS');

  // Test six argument verison
  format.setInput(job, dbWritableClass, 'USERS', 'WHERE ACTIVE = true', 'EMAIL', ['name', 'email']);
}

module.exports.testDBInputFormat = function (format) {

  try {
    testSetInputPath(format);
  } catch (err) {
    if (err.stack) {
      console.error(err.stack);
    }
    throw new Error(err.message);
  }

};