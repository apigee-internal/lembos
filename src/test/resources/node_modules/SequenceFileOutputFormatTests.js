'use strict';

var assert = require('assert');
var Job = require('hadoop-job').Job;

function testGetOutputCompressionType (format) {
  var job = new Job();

  // Test wrong arguments
  try {
    format.getOutputCompressionType();
  } catch (err) {
    assert.equal('One argument expected', err.message);
  }

  try {
    format.getOutputCompressionType(null);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    format.getOutputCompressionType('job');
  } catch (err) {
    assert.equal('First argument must be a Job object', err.message);
  }

  // Test
  assert.ok(['BLOCK', 'NONE', 'RECORD'].indexOf(format.getOutputCompressionType(job)) > -1);
}

function testsetOutputCompressionType (format) {
  var job = new Job();
  var compressionType = 'NONE';

  // Test wrong arguments
  try {
    format.setOutputCompressionType();
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    format.setOutputCompressionType(null);
  } catch (err) {
    assert.equal('Two arguments expected', err.message);
  }

  try {
    format.setOutputCompressionType(null, compressionType);
  } catch (err) {
    assert.equal('First argument is not optional', err.message);
  }

  try {
    format.setOutputCompressionType(job, null);
  } catch (err) {
    assert.equal('Second argument is not optional', err.message);
  }

  try {
    format.setOutputCompressionType('job', compressionType);
  } catch (err) {
    assert.equal('First argument must be a Job object', err.message);
  }

  try {
    format.setOutputCompressionType(job, 'fake');
  } catch (err) {
    assert.equal('fake is not a valid org.apache.hadoop.io.SequenceFile.CompressionType', err.message);
  }

  // Test
  format.setOutputCompressionType(job, compressionType);

  assert.equal(compressionType, format.getOutputCompressionType(job));

}

module.exports.testFileOutputFormat = function (format) {

  try {
    require('./FileOutputFormatTests').testFileOutputFormat(format);

    testGetOutputCompressionType(format);
    testsetOutputCompressionType(format);
  } catch (err) {
    if (err.stack) {
      console.error(err.stack);
    }
    throw new Error(err.message);
  }

};